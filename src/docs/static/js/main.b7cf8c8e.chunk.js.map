{"version":3,"sources":["logic.js","App.js","serviceWorker.js","index.js"],"names":["playerMove","gameBoard","token","r","c","console","log","checkLine","line","tokenCounter","i","length","makeColumns","col","getDiagonal1","getDiagonal2","module","exports","checkWin","App","state","this","setState","Container","Row","Col","onClick","cellClicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAA,8CASO,SAASA,EAAWC,EAAWC,EAAOC,EAAGC,GAG5C,OAFAH,EAAUE,GAAGC,GAAKF,EAClBG,QAAQC,IAAIL,GACLA,EAKJ,SAASM,EAAUC,EAAMN,GAE5B,IADA,IAAIO,EAAe,EACVC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAI7B,GAHIF,EAAKE,KAAOR,GACZO,IAEiB,IAAjBA,EACA,OAAO,EAGf,OAAO,EAGX,SAASG,EAAYX,EAAWY,GAC5B,MAAO,CAACZ,EAAU,GAAGY,GAAMZ,EAAU,GAAGY,GAAMZ,EAAU,GAAGY,IAI/D,SAASC,EAAab,GAClB,MAAO,CAACA,EAAU,GAAG,GAAIA,EAAU,GAAG,GAAIA,EAAU,GAAG,IAI3D,SAASc,EAAad,GAClB,MAAO,CAACA,EAAU,GAAG,GAAIA,EAAU,GAAG,GAAIA,EAAU,GAAG,IAkC3De,EAAOC,QAAU,CAAEL,cAAaE,eAAcC,eAAcR,YAAWW,SA/BvE,SAAkBjB,EAAWC,GACzB,IAAK,IAAIQ,EAAI,EAAGA,EAAIT,EAAUU,OAAQD,IAAK,CAEvC,GADUH,EAAUN,EAAUS,GAAIR,GAE9B,OAAO,EAGf,IAAK,IAAIQ,EAAI,EAAGA,EAAIT,EAAU,GAAGU,OAAQD,IAAK,CAE1C,GADUH,EAAUK,EAAYX,EAAWS,GAAIR,GAE3C,OAAO,EAIf,QADeK,EAAUO,EAAab,GAAYC,MAInCK,EAAUQ,EAAad,GAAYC,IAc2BD,UA1EjE,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAuEiFD,gB,yQCzB7EmB,E,2MA1CbC,MAAQ,CACNnB,UAAW,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,K,2EAICE,EAAGC,GACbC,QAAQC,IAAI,mBACZe,KAAKC,SAAS,CACZrB,UAAWD,YAAWqB,KAAKD,MAAMnB,UAb/B,IAa6CE,EAAGC,KAEpDC,QAAQC,IAAI,aAAce,KAAKD,S,+BAIvB,IAAD,OAEP,OACE,kBAAEG,EAAA,EAAF,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,QAAS,WAAQ,EAAKC,YAAY,EAAG,KAAON,KAAKD,MAAMnB,UAAU,GAAG,IACzE,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,IAC9B,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,KAEhC,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,IAC9B,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,IAC9B,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,KAEhC,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,IAC9B,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,IAC9B,kBAACwB,EAAA,EAAD,KAAMJ,KAAKD,MAAMnB,UAAU,GAAG,U,GAnCtB2B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b7cf8c8e.chunk.js","sourcesContent":["// Making the game board.Zeroes denote an empty space.\r\nlet gameBoard = [\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0]\r\n]\r\n\r\nlet xPlayerTurn = true;\r\n\r\nexport function playerMove(gameBoard, token, r, c) {\r\n    gameBoard[r][c] = token\r\n    console.log(gameBoard);\r\n    return gameBoard\r\n}\r\n\r\n\r\n\r\nexport function checkLine(line, token) {\r\n    let tokenCounter = 0;\r\n    for (let i = 0; i < line.length; i++) {\r\n        if (line[i] === token) {\r\n            tokenCounter++\r\n        }\r\n        if (tokenCounter === 3) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction makeColumns(gameBoard, col) {\r\n    return [gameBoard[0][col], gameBoard[1][col], gameBoard[2][col]]\r\n\r\n}\r\n\r\nfunction getDiagonal1(gameBoard) {\r\n    return [gameBoard[0][0], gameBoard[1][1], gameBoard[2][2]]\r\n\r\n}\r\n\r\nfunction getDiagonal2(gameBoard) {\r\n    return [gameBoard[0][2], gameBoard[1][1], gameBoard[2][0]]\r\n}\r\n\r\nfunction checkWin(gameBoard, token) {\r\n    for (let i = 0; i < gameBoard.length; i++) {\r\n        let win = checkLine(gameBoard[i], token)\r\n        if (win) {\r\n            return true\r\n        }\r\n    }\r\n    for (let i = 0; i < gameBoard[0].length; i++) {\r\n        let win = checkLine(makeColumns(gameBoard, i), token)\r\n        if (win) {\r\n            return true\r\n        }\r\n    }\r\n    let diagWin1 = checkLine(getDiagonal1(gameBoard), token)\r\n    if (diagWin1) {\r\n        return true\r\n    }\r\n    let diagWin2 = checkLine(getDiagonal2(gameBoard), token)\r\n    if (diagWin2) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nfunction communicateToUser() {\r\n    //if token x wins checkWin, show the user \"X has won!\"\r\n    //if token o wins checkwin, show the user \"o has won!\"\r\n    //cat game\r\n    // its not over\r\n}\r\n\r\nmodule.exports = { makeColumns, getDiagonal1, getDiagonal2, checkLine, checkWin, gameBoard, playerMove }","import React, { Component } from 'react';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { playerMove } from './logic'\n\nlet x = \"x\"\nclass App extends Component {\n  state = {\n    gameBoard: [\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0]\n    ]\n  }\n\n  cellClicked(r, c) {\n    console.log(\"Yo cell clicked\")\n    this.setState({\n      gameBoard: playerMove(this.state.gameBoard, x, r, c)\n    })\n    console.log(\"What state\", this.state)\n\n  }\n\n  render() {\n    let x = \"x\"\n    return (\n      < Container >\n        <Row>\n          <Col onClick={() => { this.cellClicked(0, 0) }}>{this.state.gameBoard[0][0]}</Col>\n          <Col>{this.state.gameBoard[0][1]}</Col>\n          <Col>{this.state.gameBoard[0][2]}</Col>\n        </Row>\n        <Row>\n          <Col>{this.state.gameBoard[1][0]}</Col>\n          <Col>{this.state.gameBoard[1][1]}</Col>\n          <Col>{this.state.gameBoard[1][2]}</Col>\n        </Row>\n        <Row>\n          <Col>{this.state.gameBoard[2][0]}</Col>\n          <Col>{this.state.gameBoard[2][1]}</Col>\n          <Col>{this.state.gameBoard[2][2]}</Col>\n        </Row>\n      </Container >\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}